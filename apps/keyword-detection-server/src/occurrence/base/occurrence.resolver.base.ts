/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Occurrence } from "./Occurrence";
import { OccurrenceCountArgs } from "./OccurrenceCountArgs";
import { OccurrenceFindManyArgs } from "./OccurrenceFindManyArgs";
import { OccurrenceFindUniqueArgs } from "./OccurrenceFindUniqueArgs";
import { CreateOccurrenceArgs } from "./CreateOccurrenceArgs";
import { UpdateOccurrenceArgs } from "./UpdateOccurrenceArgs";
import { DeleteOccurrenceArgs } from "./DeleteOccurrenceArgs";
import { Detection } from "../../detection/base/Detection";
import { OccurrenceService } from "../occurrence.service";
@graphql.Resolver(() => Occurrence)
export class OccurrenceResolverBase {
  constructor(protected readonly service: OccurrenceService) {}

  async _occurrencesMeta(
    @graphql.Args() args: OccurrenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Occurrence])
  async occurrences(
    @graphql.Args() args: OccurrenceFindManyArgs
  ): Promise<Occurrence[]> {
    return this.service.occurrences(args);
  }

  @graphql.Query(() => Occurrence, { nullable: true })
  async occurrence(
    @graphql.Args() args: OccurrenceFindUniqueArgs
  ): Promise<Occurrence | null> {
    const result = await this.service.occurrence(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Occurrence)
  async createOccurrence(
    @graphql.Args() args: CreateOccurrenceArgs
  ): Promise<Occurrence> {
    return await this.service.createOccurrence({
      ...args,
      data: {
        ...args.data,

        detection: args.data.detection
          ? {
              connect: args.data.detection,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Occurrence)
  async updateOccurrence(
    @graphql.Args() args: UpdateOccurrenceArgs
  ): Promise<Occurrence | null> {
    try {
      return await this.service.updateOccurrence({
        ...args,
        data: {
          ...args.data,

          detection: args.data.detection
            ? {
                connect: args.data.detection,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Occurrence)
  async deleteOccurrence(
    @graphql.Args() args: DeleteOccurrenceArgs
  ): Promise<Occurrence | null> {
    try {
      return await this.service.deleteOccurrence(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Detection, {
    nullable: true,
    name: "detection",
  })
  async getDetection(
    @graphql.Parent() parent: Occurrence
  ): Promise<Detection | null> {
    const result = await this.service.getDetection(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
