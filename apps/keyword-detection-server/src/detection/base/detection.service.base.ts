/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Detection as PrismaDetection,
  Keyword as PrismaKeyword,
  Occurrence as PrismaOccurrence,
} from "@prisma/client";

export class DetectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detection.count(args);
  }

  async detections<T extends Prisma.DetectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionFindManyArgs>
  ): Promise<PrismaDetection[]> {
    return this.prisma.detection.findMany<Prisma.DetectionFindManyArgs>(args);
  }
  async detection<T extends Prisma.DetectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionFindUniqueArgs>
  ): Promise<PrismaDetection | null> {
    return this.prisma.detection.findUnique(args);
  }
  async createDetection<T extends Prisma.DetectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionCreateArgs>
  ): Promise<PrismaDetection> {
    return this.prisma.detection.create<T>(args);
  }
  async updateDetection<T extends Prisma.DetectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionUpdateArgs>
  ): Promise<PrismaDetection> {
    return this.prisma.detection.update<T>(args);
  }
  async deleteDetection<T extends Prisma.DetectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionDeleteArgs>
  ): Promise<PrismaDetection> {
    return this.prisma.detection.delete(args);
  }

  async findKeywords(
    parentId: string,
    args: Prisma.KeywordFindManyArgs
  ): Promise<PrismaKeyword[]> {
    return this.prisma.detection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keywords(args);
  }

  async findOccurrences(
    parentId: string,
    args: Prisma.OccurrenceFindManyArgs
  ): Promise<PrismaOccurrence[]> {
    return this.prisma.detection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .occurrences(args);
  }
}
