/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Occurrence as PrismaOccurrence } from "@prisma/client";

export class OccurrenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OccurrenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.occurrence.count(args);
  }

  async occurrences<T extends Prisma.OccurrenceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OccurrenceFindManyArgs>
  ): Promise<PrismaOccurrence[]> {
    return this.prisma.occurrence.findMany<Prisma.OccurrenceFindManyArgs>(args);
  }
  async occurrence<T extends Prisma.OccurrenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OccurrenceFindUniqueArgs>
  ): Promise<PrismaOccurrence | null> {
    return this.prisma.occurrence.findUnique(args);
  }
  async createOccurrence<T extends Prisma.OccurrenceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OccurrenceCreateArgs>
  ): Promise<PrismaOccurrence> {
    return this.prisma.occurrence.create<T>(args);
  }
  async updateOccurrence<T extends Prisma.OccurrenceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OccurrenceUpdateArgs>
  ): Promise<PrismaOccurrence> {
    return this.prisma.occurrence.update<T>(args);
  }
  async deleteOccurrence<T extends Prisma.OccurrenceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OccurrenceDeleteArgs>
  ): Promise<PrismaOccurrence> {
    return this.prisma.occurrence.delete(args);
  }
}
